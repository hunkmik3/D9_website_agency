const fs = require('fs');
const path = require('path');

console.log('üîç Ki·ªÉm tra c√°c thay ƒë·ªïi MDX...\n');

// Ki·ªÉm tra package.json
const packagePath = path.join(__dirname, '..', 'package.json');
if (fs.existsSync(packagePath)) {
  const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
  
  console.log('üì¶ Dependencies:');
  if (packageJson.dependencies['@next/mdx']) {
    console.log('‚úÖ @next/mdx - ƒê√£ c√†i ƒë·∫∑t');
  } else {
    console.log('‚ùå @next/mdx - CH∆ØA c√†i ƒë·∫∑t');
  }
  
  if (packageJson.dependencies['@mdx-js/react']) {
    console.log('‚úÖ @mdx-js/react - ƒê√£ c√†i ƒë·∫∑t');
  } else {
    console.log('‚ùå @mdx-js/react - CH∆ØA c√†i ƒë·∫∑t');
  }
  
  if (packageJson.dependencies['@mdx-js/runtime']) {
    console.log('‚úÖ @mdx-js/runtime - ƒê√£ c√†i ƒë·∫∑t');
  } else {
    console.log('‚ùå @mdx-js/runtime - CH∆ØA c√†i ƒë·∫∑t');
  }
  
  if (packageJson.dependencies['next-mdx-remote']) {
    console.log('‚ùå next-mdx-remote - V·∫™N c√≤n (c·∫ßn g·ª° b·ªè)');
  } else {
    console.log('‚úÖ next-mdx-remote - ƒê√£ g·ª° b·ªè');
  }
}

console.log('\nüìÅ Files:');

// Ki·ªÉm tra c√°c file quan tr·ªçng
const files = [
  'next.config.js',
  'app/helper/MDXContent.js',
  'app/helper/MDXProvider.js',
  'app/layout.js',
  'layouts/shortcodes/all.js'
];

files.forEach(file => {
  const filePath = path.join(__dirname, '..', file);
  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath, 'utf8');
    
    if (file === 'next.config.js') {
      if (content.includes('@next/mdx') && content.includes('withMDX')) {
        console.log(`‚úÖ ${file} - ƒê√£ c·∫•u h√¨nh MDX`);
      } else {
        console.log(`‚ùå ${file} - CH∆ØA c·∫•u h√¨nh MDX`);
      }
    } else if (file === 'app/helper/MDXContent.js') {
      if (content.includes('@mdx-js/runtime') && content.includes('MDX')) {
        console.log(`‚úÖ ${file} - ƒê√£ s·ª≠ d·ª•ng @mdx-js/runtime`);
      } else {
        console.log(`‚ùå ${file} - CH∆ØA s·ª≠ d·ª•ng @mdx-js/runtime`);
      }
    } else if (file === 'app/helper/MDXProvider.js') {
      if (content.includes('@mdx-js/react') && content.includes('MDXProvider')) {
        console.log(`‚úÖ ${file} - ƒê√£ t·∫°o MDXProvider`);
      } else {
        console.log(`‚ùå ${file} - CH∆ØA t·∫°o MDXProvider`);
      }
    } else if (file === 'app/layout.js') {
      if (content.includes('CustomMDXProvider')) {
        console.log(`‚úÖ ${file} - ƒê√£ wrap MDXProvider`);
      } else {
        console.log(`‚ùå ${file} - CH∆ØA wrap MDXProvider`);
      }
    } else if (file === 'layouts/shortcodes/all.js') {
      if (content.includes('SimpleYoutubePlayer')) {
        console.log(`‚úÖ ${file} - ƒê√£ c√≥ SimpleYoutubePlayer`);
      } else {
        console.log(`‚ùå ${file} - CH∆ØA c√≥ SimpleYoutubePlayer`);
      }
    }
  } else {
    console.log(`‚ùå ${file} - KH√îNG T·ªíN T·∫†I`);
  }
});

console.log('\nüéØ K·∫øt lu·∫≠n:');
console.log('N·∫øu t·∫•t c·∫£ ƒë·ªÅu ‚úÖ, h√£y ch·∫°y: npm run build');
console.log('N·∫øu c√≥ ‚ùå, h√£y ki·ªÉm tra l·∫°i c√°c file t∆∞∆°ng ·ª©ng'); 